{"version":3,"sources":["Components/QuoteBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["QuoteBox","accentColor","handleNewQuote","currentQuote","quote","author","id","className","style","backgroundColor","icon","faQuoteLeft","Button","href","faTwitter","onClick","colorsArr","randomArrVal","arr","console","log","randomNum","Math","floor","random","length","useFetch","url","useState","data","setData","a","fetch","response","json","useEffect","fetchData","App","setAccentColor","quotes","setCurrentQuote","quoteArr","color","Spinner","animation","variant","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TA+CeA,EAvCE,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,aACrCC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OACf,OACI,sBACIC,GAAG,YACHC,UAAU,YACVC,MAAO,CAAEC,gBAAiB,SAH9B,UAKI,sBAAKF,UAAU,aAAf,UACI,cAAC,IAAD,CAAiBG,KAAMC,IAAaJ,UAAU,eAC9C,sBAAMD,GAAG,OAAOC,UAAU,QAA1B,SACKH,OAGT,qBAAKG,UAAU,eAAf,SACI,uBAAMD,GAAG,SAAT,cAAoBD,OAExB,sBAAKE,UAAU,UAAf,UACI,cAACK,EAAA,EAAD,CACIN,GAAG,cACHC,UAAU,4BACVC,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,IAC7BY,KAAI,gDAA2CT,EAA3C,YAAoDC,EAApD,mBAJR,SAMI,cAAC,IAAD,CAAiBK,KAAMI,QAE3B,cAACF,EAAA,EAAD,CACIN,GAAG,YACHC,UAAU,uBACVQ,QAAS,kBAAMb,KACfM,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,IAJjC,8B,QC3BVe,EAAY,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,UAGrIC,EAAe,SAACC,GACpBC,QAAQC,IAAIF,GACZ,IAAIG,EAAYC,KAAKC,MAAMD,KAAKE,SAAWN,EAAIO,QAE/C,OADAN,QAAQC,IAAIF,EAAIG,IACTH,EAAIG,IAGPK,EAAW,SAAAC,GACf,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KADsB,4CAGtB,8BAAAC,EAAA,sEACyBC,MAAML,GAD/B,cACQM,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAGEJ,EAAQI,GAHV,4CAHsB,sBAUtB,OADAC,qBAAU,YATY,mCASJC,KAAe,CAACT,IAC3BE,GAqCMQ,MAjCf,WACE,MAAsCT,mBAAS,WAA/C,mBAAO3B,EAAP,KAAoBqC,EAApB,KACMC,EAASb,EA5BF,0IA6Bb,EAAwCE,mBAAS,CAAEvB,OAAQ,GAAID,MAAO,KAAtE,mBAAOD,EAAP,KAAqBqC,EAArB,KAEAL,qBAAU,WACJI,GACFrC,MAED,CAACqC,IAEJ,IAAMrC,EAAiB,WACrBoC,EAAe,IAAD,OAAKrB,EAAaD,KAChC,IAAIyB,EAAWF,EAAOA,OACtBC,EAAgBvB,EAAawB,KAI/B,OACE,qBAAKlC,UAAU,MAAMC,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,GAAeyC,MAAM,GAAD,OAAKzC,IAA3E,SAE4B,KAAvBE,EAAaC,MACZ,cAACuC,EAAA,EAAD,CAASpC,UAAU,kBAAkBqC,UAAU,OAAOC,QAAQ,QAAQC,KAAK,SAA3E,SACE,sBAAMvC,UAAU,UAAhB,0BAGF,cAAC,EAAD,CAAUN,YAAaA,EAAaE,aAAcA,EAAcD,eAAgBA,OC7C3E6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f9c6f3d3.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./QuoteBox.style.scss\";\n\nconst QuoteBox = ({ accentColor, handleNewQuote, currentQuote }) => {\n    const { quote, author } = currentQuote;\n    return (\n        <div\n            id=\"quote-box\"\n            className=\"quote-box\"\n            style={{ backgroundColor: \"white\" }}\n        >\n            <div className=\"quote-text\">\n                <FontAwesomeIcon icon={faQuoteLeft} className=\"quote-mark\" />\n                <span id=\"text\" className=\"quote\">\n                    {quote}\n                </span>\n            </div>\n            <div className=\"quote-author\">\n                <span id=\"author\">-{author}</span>\n            </div>\n            <div className=\"buttons\">\n                <Button\n                    id=\"tweet-quote\"\n                    className=\"icon quote-btn transition\"\n                    style={{ backgroundColor: `${accentColor}` }}\n                    href={`https://twitter.com/intent/tweet?text=${quote}-${author}&hashtags=quote`}\n                >\n                    <FontAwesomeIcon icon={faTwitter} />\n                </Button>\n                <Button\n                    id=\"new-quote\"\n                    className=\"quote-btn transition\"\n                    onClick={() => handleNewQuote()}\n                    style={{ backgroundColor: `${accentColor}` }}\n                >\n                    New Quote\n        </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default QuoteBox;","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport QuoteBox from \"./Components/QuoteBox.component\"\nimport Spinner from 'react-bootstrap/Spinner'\n\nlet quoteURL = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nconst colorsArr = ['4FC1FF', \"E8B9AB\", 'CB769E', '69995D', 'D2D7DF', '3AA7A3', 'ECA400', '006992', 'AFECE7', '81F499', '890620', 'B6465F', '8ACDEA']\n\n\nconst randomArrVal = (arr) => {\n  console.log(arr)\n  let randomNum = Math.floor(Math.random() * arr.length)\n  console.log(arr[randomNum])\n  return arr[randomNum]\n}\n\nconst useFetch = url => {\n  const [data, setData] = useState(null);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n  }\n\n  useEffect(() => { fetchData() }, [url]);\n  return data;\n};\n\n\nfunction App() {\n  const [accentColor, setAccentColor] = useState('#4FC1FF')\n  const quotes = useFetch(quoteURL)\n  const [currentQuote, setCurrentQuote] = useState({ author: '', quote: '' })\n\n  useEffect(() => {\n    if (quotes) {\n      handleNewQuote()\n    }\n  }, [quotes])\n\n  const handleNewQuote = () => {\n    setAccentColor(`#${randomArrVal(colorsArr)}`)\n    let quoteArr = quotes.quotes\n    setCurrentQuote(randomArrVal(quoteArr))\n  }\n\n\n  return (\n    <div className=\"App\" style={{ backgroundColor: `${accentColor}`, color: `${accentColor}` }}>\n      {\n        (currentQuote.quote === \"\") ?\n          <Spinner className=\"loading-spinner\" animation=\"grow\" variant=\"light\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          :\n          <QuoteBox accentColor={accentColor} currentQuote={currentQuote} handleNewQuote={handleNewQuote} />\n      }\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}